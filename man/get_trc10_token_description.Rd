% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_trc10_token_description.R
\name{get_trc10_token_description}
\alias{get_trc10_token_description}
\title{Get description of a TRC-10 token}
\usage{
get_trc10_token_description(
  token_id = NULL,
  token_name = NULL,
  detailed_info = FALSE,
  max_attempts = 3L
)
}
\arguments{
\item{token_id}{(character): ID of the TRC-10 token of interest,
presented either as a set of numbers (e.g., \code{"1002000"}).}

\item{token_name}{(character): common name of the TRC-10
token of interest (e.g., \code{BitTorrent}).}

\item{detailed_info}{(boolean): if \code{FALSE} (default),
only basic information about the TRC-10 token assets is returned.
If \code{TRUE}, an extended information is returned.}

\item{max_attempts}{(integer, positive): specifies the
maximum number of additional attempts to call a URL if the
first attempt fails (i.e. its call status is different from
\code{200}). Additional attempts are implemented with an exponential
backoff. Defaults to \code{3}.}
}
\value{
A tibble, whose content depends on the \code{detailed_info} argument. If
\code{detailed_info = FALSE} (default), the tibble will have the following 5
columns:
\itemize{
\item \code{token_id} (character): same as argument \code{token_id};
\item \code{token_name} (character): commont name of the token;
\item \code{token_abbr} (character): abbreviated name of the token;
\item \code{owner_address} (character): address of the token issuer, in \code{base58check}
format;
\item \code{precision} (integer): number of digits in the decimal part of the
token's amount (see \code{\link[=apply_decimal]{apply_decimal()}} for details).
}

If \code{detailed_info = TRUE}, the returned tibble will have the same 5 columns
as above, and the following additional columns:
\itemize{
\item \code{request_time} (POSIXct): date and time when the query was made;
\item \code{reputation} (character): reputation of the token on the TRON blockchain
(usually, \code{"ok"});
\item \code{vip} (boolean): indicator of whether this token is treated as a VIP asset
on the blockchain;
\item \code{description} (character): a free-text field describing the token;
\item \code{date_created} (POSIXct): date and time of the token's creation;
\item \code{ico_start_time} (POSIXct, UTC timezone): date and time of the asset's ICO
start;
\item \code{ico_end_time} (POSIXct, UTC timezone): date and time of the asset's ICO
end;
\item \code{url} (character): URL of the token's project;
\item \code{github} (character): URL of the project's Github repository;
\item \code{total_supply} (double): total suppyly of the token;
\item \code{amount_issued} (double): number of issued tokens;
\item \code{issued_percentage} (double): percentage of \code{amount_issued} from
\code{total_supply};
\item \code{number_of_holders} (integer): current number of accounts that hold this
token;
\item \code{total_tx} (integer): current cumulative number of transactions that
involved this token;
\item \code{price_in_trx} (double): current price of this token expressed in TRX;
\item \code{tx_count_24h} (integer): number of transactions in the last 24h that
involved this token;
\item \code{vol_in_trx_24h} (double): volume of transactions in the last 24h that
involved this token (as of \code{request_time}).
}

If no description for a token can be found (this happens in rare cases, e.g.
for \code{token_id = "1001369"}), the function will return no data (\code{NULL}),
with the respective console message.
}
\description{
Returns various bits of information about a TRC-10 token
}
\details{
TRC-10 are tokens issued by the system contract (as opposed to
TRC-20 tokens, which are issued by smart contracts). See
\href{https://developers.tron.network/docs/trc10}{official documentation}
for details.
}
\examples{
r1 <- get_trc10_token_description(token_id = "1002000",
                                  detailed_info = TRUE)
r2 <- get_trc10_token_description(token_name = "BitTorrent",
                                  detailed_info = TRUE)
identical(r1$owner_address, r2$owner_address) # TRUE
print(r1)
}
